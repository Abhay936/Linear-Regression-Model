# -*- coding: utf-8 -*-
"""california_housing_linear_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1716_8nSdf86S4T1ZSlZGNR5CwGLpnlsQ
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from sklearn.datasets import fetch_california_housing
housing = fetch_california_housing(as_frame=True)
df=housing.frame
df.head()

df.columns
y=df['MedHouseVal']

# df = df.drop(columns='MedHouseVal')
df.head()

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(df,y,test_size=0.2,random_state=42)

#standerdising scaler
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()

x_train = scaler.fit_transform(x_train)  #fit ransform is used becoz of learing of scaling and then apply scaling on training data
x_test = scaler.transform(x_test)        #tranform is used on test data or unseen data to apply the same tranformation or scaling that is learned from trainning data
#inverse tranform is used to get orginal data from scaling

from sklearn.linear_model import LinearRegression
regression = LinearRegression()
regression.fit(x_train,y_train)
from sklearn.model_selection import cross_val_score

mse=cross_val_score(regression,x_train,y_train,cv=10,scoring='neg_mean_squared_error')
mse

np.mean(mse)

reg_pred=regression.predict(x_test)
reg_pred

import seaborn as sns
sns.displot(reg_pred-y_test,kind='kde')

from sklearn.metrics import r2_score
score=r2_score(y_test,reg_pred)
score

def adjusted_r2(y_true, y_pred, n, p):
    r2 = r2_score(y_true, y_pred)
    return 1 - (1 - r2) * ((n - 1) / (n - p - 1))
no_of_independent_var=1
length_of_y_test=y_test.shape[0]
adjusted_r2(y_test,reg_pred,length_of_y_test,no_of_independent_var)